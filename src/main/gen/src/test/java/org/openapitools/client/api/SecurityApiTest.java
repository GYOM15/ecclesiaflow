/*
 * Church Management Authentication API
 * API d'authentification et de gestion des utilisateurs pour un système de gestion d'églises en mode multi-tenant. Une église s'enregistre d'abord, puis peut créer et administrer ses propres utilisateurs avec des rôles spécifiques. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@churchmanagement.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ChangePasswordRequest;
import org.openapitools.client.model.ChurchesChurchIdAuthPasswordResetPostRequest;
import org.openapitools.client.model.ChurchesChurchIdAuthPasswordResetTokenPostRequest;
import org.openapitools.client.model.MFASetupResponse;
import org.openapitools.client.model.MFAVerifyRequest;
import org.openapitools.client.model.Session;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SecurityApi
 */
@Disabled
public class SecurityApiTest {

    private final SecurityApi api = new SecurityApi();

    /**
     * Configurer la MFA pour un utilisateur d&#39;église
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void churchesChurchIdAuthMfaSetupPostTest() throws ApiException {
        String churchId = null;
        MFASetupResponse response = api.churchesChurchIdAuthMfaSetupPost(churchId);
        // TODO: test validations
    }

    /**
     * Vérifier le code MFA pour un utilisateur d&#39;église
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void churchesChurchIdAuthMfaVerifyPostTest() throws ApiException {
        String churchId = null;
        MFAVerifyRequest mfAVerifyRequest = null;
        api.churchesChurchIdAuthMfaVerifyPost(churchId, mfAVerifyRequest);
        // TODO: test validations
    }

    /**
     * Changer le mot de passe d&#39;un utilisateur d&#39;église
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void churchesChurchIdAuthPasswordChangePostTest() throws ApiException {
        String churchId = null;
        ChangePasswordRequest changePasswordRequest = null;
        api.churchesChurchIdAuthPasswordChangePost(churchId, changePasswordRequest);
        // TODO: test validations
    }

    /**
     * Demander une réinitialisation de mot de passe pour un utilisateur d&#39;église
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void churchesChurchIdAuthPasswordResetPostTest() throws ApiException {
        String churchId = null;
        ChurchesChurchIdAuthPasswordResetPostRequest churchesChurchIdAuthPasswordResetPostRequest = null;
        api.churchesChurchIdAuthPasswordResetPost(churchId, churchesChurchIdAuthPasswordResetPostRequest);
        // TODO: test validations
    }

    /**
     * Réinitialiser le mot de passe avec un token pour un utilisateur d&#39;église
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void churchesChurchIdAuthPasswordResetTokenPostTest() throws ApiException {
        String churchId = null;
        String token = null;
        ChurchesChurchIdAuthPasswordResetTokenPostRequest churchesChurchIdAuthPasswordResetTokenPostRequest = null;
        api.churchesChurchIdAuthPasswordResetTokenPost(churchId, token, churchesChurchIdAuthPasswordResetTokenPostRequest);
        // TODO: test validations
    }

    /**
     * Terminer toutes les sessions d&#39;un utilisateur d&#39;une église
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void churchesChurchIdUsersSessionsDeleteTest() throws ApiException {
        String churchId = null;
        api.churchesChurchIdUsersSessionsDelete(churchId);
        // TODO: test validations
    }

    /**
     * Lister les sessions actives d&#39;un utilisateur d&#39;une église
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void churchesChurchIdUsersSessionsGetTest() throws ApiException {
        String churchId = null;
        List<Session> response = api.churchesChurchIdUsersSessionsGet(churchId);
        // TODO: test validations
    }

}
