/*
 * Church Management Authentication API
 * API d'authentification et de gestion des utilisateurs pour un système de gestion d'églises en mode multi-tenant. Une église s'enregistre d'abord, puis peut créer et administrer ses propres utilisateurs avec des rôles spécifiques. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@churchmanagement.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ChurchLoginUser401Response;
import org.openapitools.client.model.LoginRequest;
import org.openapitools.client.model.LoginResponse;
import org.openapitools.client.model.RefreshTokenRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for churchLoginUser
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param loginRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connexion réussie </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Erreur d&#39;authentification </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Compte bloqué </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchLoginUserCall(String churchId, LoginRequest loginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loginRequest;

        // create path and map variables
        String localVarPath = "/churches/{churchId}/auth/login"
            .replace("{" + "churchId" + "}", localVarApiClient.escapeString(churchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call churchLoginUserValidateBeforeCall(String churchId, LoginRequest loginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'churchId' is set
        if (churchId == null) {
            throw new ApiException("Missing the required parameter 'churchId' when calling churchLoginUser(Async)");
        }

        // verify the required parameter 'loginRequest' is set
        if (loginRequest == null) {
            throw new ApiException("Missing the required parameter 'loginRequest' when calling churchLoginUser(Async)");
        }

        return churchLoginUserCall(churchId, loginRequest, _callback);

    }

    /**
     * Connexion d&#39;un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param loginRequest  (required)
     * @return LoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connexion réussie </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Erreur d&#39;authentification </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Compte bloqué </td><td>  -  </td></tr>
     </table>
     */
    public LoginResponse churchLoginUser(String churchId, LoginRequest loginRequest) throws ApiException {
        ApiResponse<LoginResponse> localVarResp = churchLoginUserWithHttpInfo(churchId, loginRequest);
        return localVarResp.getData();
    }

    /**
     * Connexion d&#39;un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param loginRequest  (required)
     * @return ApiResponse&lt;LoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connexion réussie </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Erreur d&#39;authentification </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Compte bloqué </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginResponse> churchLoginUserWithHttpInfo(String churchId, LoginRequest loginRequest) throws ApiException {
        okhttp3.Call localVarCall = churchLoginUserValidateBeforeCall(churchId, loginRequest, null);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Connexion d&#39;un utilisateur d&#39;église (asynchronously)
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param loginRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connexion réussie </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Erreur d&#39;authentification </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Compte bloqué </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchLoginUserAsync(String churchId, LoginRequest loginRequest, final ApiCallback<LoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = churchLoginUserValidateBeforeCall(churchId, loginRequest, _callback);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for churchesChurchIdAuthLogoutPost
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Déconnexion réussie </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Non autorisé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdAuthLogoutPostCall(String churchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/churches/{churchId}/auth/logout"
            .replace("{" + "churchId" + "}", localVarApiClient.escapeString(churchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call churchesChurchIdAuthLogoutPostValidateBeforeCall(String churchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'churchId' is set
        if (churchId == null) {
            throw new ApiException("Missing the required parameter 'churchId' when calling churchesChurchIdAuthLogoutPost(Async)");
        }

        return churchesChurchIdAuthLogoutPostCall(churchId, _callback);

    }

    /**
     * Déconnexion d&#39;un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Déconnexion réussie </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Non autorisé </td><td>  -  </td></tr>
     </table>
     */
    public void churchesChurchIdAuthLogoutPost(String churchId) throws ApiException {
        churchesChurchIdAuthLogoutPostWithHttpInfo(churchId);
    }

    /**
     * Déconnexion d&#39;un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Déconnexion réussie </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Non autorisé </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> churchesChurchIdAuthLogoutPostWithHttpInfo(String churchId) throws ApiException {
        okhttp3.Call localVarCall = churchesChurchIdAuthLogoutPostValidateBeforeCall(churchId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Déconnexion d&#39;un utilisateur d&#39;église (asynchronously)
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Déconnexion réussie </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Non autorisé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdAuthLogoutPostAsync(String churchId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = churchesChurchIdAuthLogoutPostValidateBeforeCall(churchId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for churchesChurchIdAuthRefreshTokenPost
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param refreshTokenRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token rafraîchi </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Refresh token invalide </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdAuthRefreshTokenPostCall(String churchId, RefreshTokenRequest refreshTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refreshTokenRequest;

        // create path and map variables
        String localVarPath = "/churches/{churchId}/auth/refresh-token"
            .replace("{" + "churchId" + "}", localVarApiClient.escapeString(churchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call churchesChurchIdAuthRefreshTokenPostValidateBeforeCall(String churchId, RefreshTokenRequest refreshTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'churchId' is set
        if (churchId == null) {
            throw new ApiException("Missing the required parameter 'churchId' when calling churchesChurchIdAuthRefreshTokenPost(Async)");
        }

        // verify the required parameter 'refreshTokenRequest' is set
        if (refreshTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'refreshTokenRequest' when calling churchesChurchIdAuthRefreshTokenPost(Async)");
        }

        return churchesChurchIdAuthRefreshTokenPostCall(churchId, refreshTokenRequest, _callback);

    }

    /**
     * Rafraîchir le token d&#39;accès pour un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param refreshTokenRequest  (required)
     * @return LoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token rafraîchi </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Refresh token invalide </td><td>  -  </td></tr>
     </table>
     */
    public LoginResponse churchesChurchIdAuthRefreshTokenPost(String churchId, RefreshTokenRequest refreshTokenRequest) throws ApiException {
        ApiResponse<LoginResponse> localVarResp = churchesChurchIdAuthRefreshTokenPostWithHttpInfo(churchId, refreshTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Rafraîchir le token d&#39;accès pour un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param refreshTokenRequest  (required)
     * @return ApiResponse&lt;LoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token rafraîchi </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Refresh token invalide </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginResponse> churchesChurchIdAuthRefreshTokenPostWithHttpInfo(String churchId, RefreshTokenRequest refreshTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = churchesChurchIdAuthRefreshTokenPostValidateBeforeCall(churchId, refreshTokenRequest, null);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rafraîchir le token d&#39;accès pour un utilisateur d&#39;église (asynchronously)
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param refreshTokenRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token rafraîchi </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Refresh token invalide </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdAuthRefreshTokenPostAsync(String churchId, RefreshTokenRequest refreshTokenRequest, final ApiCallback<LoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = churchesChurchIdAuthRefreshTokenPostValidateBeforeCall(churchId, refreshTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
