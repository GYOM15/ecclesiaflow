/*
 * EcclesiaFlow Authentication API
 * API d'authentification et de gestion des utilisateurs pour un système de gestion d'églises en mode multi-tenant. Une église s'enregistre d'abord, puis peut créer et administrer ses propres utilisateurs avec des rôles spécifiques. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ecclesiaflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ChangePasswordRequest;
import org.openapitools.client.model.ChurchesChurchIdAuthPasswordResetPostRequest;
import org.openapitools.client.model.ChurchesChurchIdAuthPasswordResetTokenPostRequest;
import org.openapitools.client.model.MFASetupResponse;
import org.openapitools.client.model.MFAVerifyRequest;
import org.openapitools.client.model.Session;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecurityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecurityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecurityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for churchesChurchIdAuthMfaSetupPost
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Configuration MFA réussie </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdAuthMfaSetupPostCall(String churchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/churches/{churchId}/auth/mfa/setup"
            .replace("{" + "churchId" + "}", localVarApiClient.escapeString(churchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call churchesChurchIdAuthMfaSetupPostValidateBeforeCall(String churchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'churchId' is set
        if (churchId == null) {
            throw new ApiException("Missing the required parameter 'churchId' when calling churchesChurchIdAuthMfaSetupPost(Async)");
        }

        return churchesChurchIdAuthMfaSetupPostCall(churchId, _callback);

    }

    /**
     * Configurer la MFA pour un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @return MFASetupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Configuration MFA réussie </td><td>  -  </td></tr>
     </table>
     */
    public MFASetupResponse churchesChurchIdAuthMfaSetupPost(String churchId) throws ApiException {
        ApiResponse<MFASetupResponse> localVarResp = churchesChurchIdAuthMfaSetupPostWithHttpInfo(churchId);
        return localVarResp.getData();
    }

    /**
     * Configurer la MFA pour un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @return ApiResponse&lt;MFASetupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Configuration MFA réussie </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MFASetupResponse> churchesChurchIdAuthMfaSetupPostWithHttpInfo(String churchId) throws ApiException {
        okhttp3.Call localVarCall = churchesChurchIdAuthMfaSetupPostValidateBeforeCall(churchId, null);
        Type localVarReturnType = new TypeToken<MFASetupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Configurer la MFA pour un utilisateur d&#39;église (asynchronously)
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Configuration MFA réussie </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdAuthMfaSetupPostAsync(String churchId, final ApiCallback<MFASetupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = churchesChurchIdAuthMfaSetupPostValidateBeforeCall(churchId, _callback);
        Type localVarReturnType = new TypeToken<MFASetupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for churchesChurchIdAuthMfaVerifyPost
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param mfAVerifyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vérification MFA réussie </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Code invalide </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdAuthMfaVerifyPostCall(String churchId, MFAVerifyRequest mfAVerifyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mfAVerifyRequest;

        // create path and map variables
        String localVarPath = "/churches/{churchId}/auth/mfa/verify"
            .replace("{" + "churchId" + "}", localVarApiClient.escapeString(churchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call churchesChurchIdAuthMfaVerifyPostValidateBeforeCall(String churchId, MFAVerifyRequest mfAVerifyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'churchId' is set
        if (churchId == null) {
            throw new ApiException("Missing the required parameter 'churchId' when calling churchesChurchIdAuthMfaVerifyPost(Async)");
        }

        // verify the required parameter 'mfAVerifyRequest' is set
        if (mfAVerifyRequest == null) {
            throw new ApiException("Missing the required parameter 'mfAVerifyRequest' when calling churchesChurchIdAuthMfaVerifyPost(Async)");
        }

        return churchesChurchIdAuthMfaVerifyPostCall(churchId, mfAVerifyRequest, _callback);

    }

    /**
     * Vérifier le code MFA pour un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param mfAVerifyRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vérification MFA réussie </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Code invalide </td><td>  -  </td></tr>
     </table>
     */
    public void churchesChurchIdAuthMfaVerifyPost(String churchId, MFAVerifyRequest mfAVerifyRequest) throws ApiException {
        churchesChurchIdAuthMfaVerifyPostWithHttpInfo(churchId, mfAVerifyRequest);
    }

    /**
     * Vérifier le code MFA pour un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param mfAVerifyRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vérification MFA réussie </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Code invalide </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> churchesChurchIdAuthMfaVerifyPostWithHttpInfo(String churchId, MFAVerifyRequest mfAVerifyRequest) throws ApiException {
        okhttp3.Call localVarCall = churchesChurchIdAuthMfaVerifyPostValidateBeforeCall(churchId, mfAVerifyRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Vérifier le code MFA pour un utilisateur d&#39;église (asynchronously)
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param mfAVerifyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vérification MFA réussie </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Code invalide </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdAuthMfaVerifyPostAsync(String churchId, MFAVerifyRequest mfAVerifyRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = churchesChurchIdAuthMfaVerifyPostValidateBeforeCall(churchId, mfAVerifyRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for churchesChurchIdAuthPasswordChangePost
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param changePasswordRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mot de passe modifié </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Mot de passe invalide </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Non autorisé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdAuthPasswordChangePostCall(String churchId, ChangePasswordRequest changePasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePasswordRequest;

        // create path and map variables
        String localVarPath = "/churches/{churchId}/auth/password/change"
            .replace("{" + "churchId" + "}", localVarApiClient.escapeString(churchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call churchesChurchIdAuthPasswordChangePostValidateBeforeCall(String churchId, ChangePasswordRequest changePasswordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'churchId' is set
        if (churchId == null) {
            throw new ApiException("Missing the required parameter 'churchId' when calling churchesChurchIdAuthPasswordChangePost(Async)");
        }

        // verify the required parameter 'changePasswordRequest' is set
        if (changePasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'changePasswordRequest' when calling churchesChurchIdAuthPasswordChangePost(Async)");
        }

        return churchesChurchIdAuthPasswordChangePostCall(churchId, changePasswordRequest, _callback);

    }

    /**
     * Changer le mot de passe d&#39;un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param changePasswordRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mot de passe modifié </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Mot de passe invalide </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Non autorisé </td><td>  -  </td></tr>
     </table>
     */
    public void churchesChurchIdAuthPasswordChangePost(String churchId, ChangePasswordRequest changePasswordRequest) throws ApiException {
        churchesChurchIdAuthPasswordChangePostWithHttpInfo(churchId, changePasswordRequest);
    }

    /**
     * Changer le mot de passe d&#39;un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param changePasswordRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mot de passe modifié </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Mot de passe invalide </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Non autorisé </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> churchesChurchIdAuthPasswordChangePostWithHttpInfo(String churchId, ChangePasswordRequest changePasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = churchesChurchIdAuthPasswordChangePostValidateBeforeCall(churchId, changePasswordRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Changer le mot de passe d&#39;un utilisateur d&#39;église (asynchronously)
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param changePasswordRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mot de passe modifié </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Mot de passe invalide </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Non autorisé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdAuthPasswordChangePostAsync(String churchId, ChangePasswordRequest changePasswordRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = churchesChurchIdAuthPasswordChangePostValidateBeforeCall(churchId, changePasswordRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for churchesChurchIdAuthPasswordResetPost
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param churchesChurchIdAuthPasswordResetPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email de réinitialisation envoyé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email non trouvé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdAuthPasswordResetPostCall(String churchId, ChurchesChurchIdAuthPasswordResetPostRequest churchesChurchIdAuthPasswordResetPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = churchesChurchIdAuthPasswordResetPostRequest;

        // create path and map variables
        String localVarPath = "/churches/{churchId}/auth/password/reset"
            .replace("{" + "churchId" + "}", localVarApiClient.escapeString(churchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call churchesChurchIdAuthPasswordResetPostValidateBeforeCall(String churchId, ChurchesChurchIdAuthPasswordResetPostRequest churchesChurchIdAuthPasswordResetPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'churchId' is set
        if (churchId == null) {
            throw new ApiException("Missing the required parameter 'churchId' when calling churchesChurchIdAuthPasswordResetPost(Async)");
        }

        // verify the required parameter 'churchesChurchIdAuthPasswordResetPostRequest' is set
        if (churchesChurchIdAuthPasswordResetPostRequest == null) {
            throw new ApiException("Missing the required parameter 'churchesChurchIdAuthPasswordResetPostRequest' when calling churchesChurchIdAuthPasswordResetPost(Async)");
        }

        return churchesChurchIdAuthPasswordResetPostCall(churchId, churchesChurchIdAuthPasswordResetPostRequest, _callback);

    }

    /**
     * Demander une réinitialisation de mot de passe pour un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param churchesChurchIdAuthPasswordResetPostRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email de réinitialisation envoyé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email non trouvé </td><td>  -  </td></tr>
     </table>
     */
    public void churchesChurchIdAuthPasswordResetPost(String churchId, ChurchesChurchIdAuthPasswordResetPostRequest churchesChurchIdAuthPasswordResetPostRequest) throws ApiException {
        churchesChurchIdAuthPasswordResetPostWithHttpInfo(churchId, churchesChurchIdAuthPasswordResetPostRequest);
    }

    /**
     * Demander une réinitialisation de mot de passe pour un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param churchesChurchIdAuthPasswordResetPostRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email de réinitialisation envoyé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email non trouvé </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> churchesChurchIdAuthPasswordResetPostWithHttpInfo(String churchId, ChurchesChurchIdAuthPasswordResetPostRequest churchesChurchIdAuthPasswordResetPostRequest) throws ApiException {
        okhttp3.Call localVarCall = churchesChurchIdAuthPasswordResetPostValidateBeforeCall(churchId, churchesChurchIdAuthPasswordResetPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Demander une réinitialisation de mot de passe pour un utilisateur d&#39;église (asynchronously)
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param churchesChurchIdAuthPasswordResetPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email de réinitialisation envoyé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Email non trouvé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdAuthPasswordResetPostAsync(String churchId, ChurchesChurchIdAuthPasswordResetPostRequest churchesChurchIdAuthPasswordResetPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = churchesChurchIdAuthPasswordResetPostValidateBeforeCall(churchId, churchesChurchIdAuthPasswordResetPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for churchesChurchIdAuthPasswordResetTokenPost
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param token Token reçu par email de réinitialisation (required)
     * @param churchesChurchIdAuthPasswordResetTokenPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Réinitialisation du mot de passe réussie </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Token invalide </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdAuthPasswordResetTokenPostCall(String churchId, String token, ChurchesChurchIdAuthPasswordResetTokenPostRequest churchesChurchIdAuthPasswordResetTokenPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = churchesChurchIdAuthPasswordResetTokenPostRequest;

        // create path and map variables
        String localVarPath = "/churches/{churchId}/auth/password/reset/{token}"
            .replace("{" + "churchId" + "}", localVarApiClient.escapeString(churchId.toString()))
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call churchesChurchIdAuthPasswordResetTokenPostValidateBeforeCall(String churchId, String token, ChurchesChurchIdAuthPasswordResetTokenPostRequest churchesChurchIdAuthPasswordResetTokenPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'churchId' is set
        if (churchId == null) {
            throw new ApiException("Missing the required parameter 'churchId' when calling churchesChurchIdAuthPasswordResetTokenPost(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling churchesChurchIdAuthPasswordResetTokenPost(Async)");
        }

        // verify the required parameter 'churchesChurchIdAuthPasswordResetTokenPostRequest' is set
        if (churchesChurchIdAuthPasswordResetTokenPostRequest == null) {
            throw new ApiException("Missing the required parameter 'churchesChurchIdAuthPasswordResetTokenPostRequest' when calling churchesChurchIdAuthPasswordResetTokenPost(Async)");
        }

        return churchesChurchIdAuthPasswordResetTokenPostCall(churchId, token, churchesChurchIdAuthPasswordResetTokenPostRequest, _callback);

    }

    /**
     * Réinitialiser le mot de passe avec un token pour un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param token Token reçu par email de réinitialisation (required)
     * @param churchesChurchIdAuthPasswordResetTokenPostRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Réinitialisation du mot de passe réussie </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Token invalide </td><td>  -  </td></tr>
     </table>
     */
    public void churchesChurchIdAuthPasswordResetTokenPost(String churchId, String token, ChurchesChurchIdAuthPasswordResetTokenPostRequest churchesChurchIdAuthPasswordResetTokenPostRequest) throws ApiException {
        churchesChurchIdAuthPasswordResetTokenPostWithHttpInfo(churchId, token, churchesChurchIdAuthPasswordResetTokenPostRequest);
    }

    /**
     * Réinitialiser le mot de passe avec un token pour un utilisateur d&#39;église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param token Token reçu par email de réinitialisation (required)
     * @param churchesChurchIdAuthPasswordResetTokenPostRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Réinitialisation du mot de passe réussie </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Token invalide </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> churchesChurchIdAuthPasswordResetTokenPostWithHttpInfo(String churchId, String token, ChurchesChurchIdAuthPasswordResetTokenPostRequest churchesChurchIdAuthPasswordResetTokenPostRequest) throws ApiException {
        okhttp3.Call localVarCall = churchesChurchIdAuthPasswordResetTokenPostValidateBeforeCall(churchId, token, churchesChurchIdAuthPasswordResetTokenPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Réinitialiser le mot de passe avec un token pour un utilisateur d&#39;église (asynchronously)
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param token Token reçu par email de réinitialisation (required)
     * @param churchesChurchIdAuthPasswordResetTokenPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Réinitialisation du mot de passe réussie </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Token invalide </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdAuthPasswordResetTokenPostAsync(String churchId, String token, ChurchesChurchIdAuthPasswordResetTokenPostRequest churchesChurchIdAuthPasswordResetTokenPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = churchesChurchIdAuthPasswordResetTokenPostValidateBeforeCall(churchId, token, churchesChurchIdAuthPasswordResetTokenPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for churchesChurchIdUsersSessionsDelete
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Toutes les sessions ont été terminées </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdUsersSessionsDeleteCall(String churchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/churches/{churchId}/users/sessions"
            .replace("{" + "churchId" + "}", localVarApiClient.escapeString(churchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call churchesChurchIdUsersSessionsDeleteValidateBeforeCall(String churchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'churchId' is set
        if (churchId == null) {
            throw new ApiException("Missing the required parameter 'churchId' when calling churchesChurchIdUsersSessionsDelete(Async)");
        }

        return churchesChurchIdUsersSessionsDeleteCall(churchId, _callback);

    }

    /**
     * Terminer toutes les sessions d&#39;un utilisateur d&#39;une église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Toutes les sessions ont été terminées </td><td>  -  </td></tr>
     </table>
     */
    public void churchesChurchIdUsersSessionsDelete(String churchId) throws ApiException {
        churchesChurchIdUsersSessionsDeleteWithHttpInfo(churchId);
    }

    /**
     * Terminer toutes les sessions d&#39;un utilisateur d&#39;une église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Toutes les sessions ont été terminées </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> churchesChurchIdUsersSessionsDeleteWithHttpInfo(String churchId) throws ApiException {
        okhttp3.Call localVarCall = churchesChurchIdUsersSessionsDeleteValidateBeforeCall(churchId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Terminer toutes les sessions d&#39;un utilisateur d&#39;une église (asynchronously)
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Toutes les sessions ont été terminées </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdUsersSessionsDeleteAsync(String churchId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = churchesChurchIdUsersSessionsDeleteValidateBeforeCall(churchId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for churchesChurchIdUsersSessionsGet
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sessions récupérées </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdUsersSessionsGetCall(String churchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/churches/{churchId}/users/sessions"
            .replace("{" + "churchId" + "}", localVarApiClient.escapeString(churchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call churchesChurchIdUsersSessionsGetValidateBeforeCall(String churchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'churchId' is set
        if (churchId == null) {
            throw new ApiException("Missing the required parameter 'churchId' when calling churchesChurchIdUsersSessionsGet(Async)");
        }

        return churchesChurchIdUsersSessionsGetCall(churchId, _callback);

    }

    /**
     * Lister les sessions actives d&#39;un utilisateur d&#39;une église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @return List&lt;Session&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sessions récupérées </td><td>  -  </td></tr>
     </table>
     */
    public List<Session> churchesChurchIdUsersSessionsGet(String churchId) throws ApiException {
        ApiResponse<List<Session>> localVarResp = churchesChurchIdUsersSessionsGetWithHttpInfo(churchId);
        return localVarResp.getData();
    }

    /**
     * Lister les sessions actives d&#39;un utilisateur d&#39;une église
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @return ApiResponse&lt;List&lt;Session&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sessions récupérées </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Session>> churchesChurchIdUsersSessionsGetWithHttpInfo(String churchId) throws ApiException {
        okhttp3.Call localVarCall = churchesChurchIdUsersSessionsGetValidateBeforeCall(churchId, null);
        Type localVarReturnType = new TypeToken<List<Session>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lister les sessions actives d&#39;un utilisateur d&#39;une église (asynchronously)
     * 
     * @param churchId Identifiant unique de l&#39;église (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sessions récupérées </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call churchesChurchIdUsersSessionsGetAsync(String churchId, final ApiCallback<List<Session>> _callback) throws ApiException {

        okhttp3.Call localVarCall = churchesChurchIdUsersSessionsGetValidateBeforeCall(churchId, _callback);
        Type localVarReturnType = new TypeToken<List<Session>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
